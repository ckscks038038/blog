<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Backtracking on Lutein 40g</title>
    <link>http://localhost:1313/blog/tags/backtracking/</link>
    <description>Recent content in Backtracking on Lutein 40g</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 May 2023 00:19:06 +0800</lastBuildDate><atom:link href="http://localhost:1313/blog/tags/backtracking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>17. Letter Combinations of a Phone Number</title>
      <link>http://localhost:1313/blog/post/leetcode_17/</link>
      <pubDate>Wed, 24 May 2023 00:19:06 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/post/leetcode_17/</guid>
      <description>前言： 這題應該是backtracking寫到現在最簡單的一題，不需要考慮pop()，只管把所有可能列出來即可。
題目： Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
解題思路： 看著圖片，把所有可能按照給的digits依序append()到curStr即可
唯一需要注意的是，如果遇到空字串digits = &amp;quot;&amp;quot;，需要return 的是空list[]，但進入迴圈的話會在一開始就append一個&amp;quot;&amp;quot;
為了避免此問題要先判斷digits是否為空字串
程式碼： class Solution: def letterCombinations(self, digits: str) -&amp;gt; List[str]: res = [] map = { &amp;#34;2&amp;#34;:&amp;#34;abc&amp;#34;, &amp;#34;3&amp;#34;:&amp;#34;def&amp;#34;, &amp;#34;4&amp;#34;:&amp;#34;ghi&amp;#34;, &amp;#34;5&amp;#34;:&amp;#34;jkl&amp;#34;, &amp;#34;6&amp;#34;:&amp;#34;mno&amp;#34;, &amp;#34;7&amp;#34;:&amp;#34;pqrs&amp;#34;, &amp;#34;8&amp;#34;:&amp;#34;tuv&amp;#34;, &amp;#34;9&amp;#34;:&amp;#34;wxyz&amp;#34;, } def dfs(curStr, i): if i &amp;gt;= len(digits): res.</description>
    </item>
    
    <item>
      <title>79. Word Search</title>
      <link>http://localhost:1313/blog/post/leetcode_79/</link>
      <pubDate>Tue, 23 May 2023 22:44:27 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/post/leetcode_79/</guid>
      <description>前言： 這題也是經典backtracking套路，可以分層理解。假設大目標是ABCD，那找到A以後，目標變成找BCD，一直延續下去。
題目： Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
* Example 1: Input: board = [[&amp;#34;A&amp;#34;,&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;E&amp;#34;], [&amp;#34;S&amp;#34;,&amp;#34;F&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;S&amp;#34;], [&amp;#34;A&amp;#34;,&amp;#34;D&amp;#34;,&amp;#34;E&amp;#34;,&amp;#34;E&amp;#34;]], word = &amp;#34;ABCCED&amp;#34; Output: true * Example 2: Input: board = [[&amp;#34;A&amp;#34;,&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;E&amp;#34;], [&amp;#34;S&amp;#34;,&amp;#34;F&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;S&amp;#34;], [&amp;#34;A&amp;#34;,&amp;#34;D&amp;#34;,&amp;#34;E&amp;#34;,&amp;#34;E&amp;#34;]], word = &amp;#34;SEE&amp;#34; Output: true * Example 3: 解題思路： 兩個核心概念，邊界條件以及bfs機制。</description>
    </item>
    
    <item>
      <title>131. Palindrome Partitioning</title>
      <link>http://localhost:1313/blog/post/leetcode_131/</link>
      <pubDate>Mon, 22 May 2023 23:40:03 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/post/leetcode_131/</guid>
      <description>前言： 一開始看很難，但其實是很典型的backtracking套路，不要想一次把整個遞迴結構想出來，應該以單層的角度，把下面子問題抽象來看。
題目： Given a string s, partition s such that every substring of the partition is a palindrome . Return all possible palindrome partitioning of s.
* Example 1: Input: s = &amp;#34;aab&amp;#34; Output: [[&amp;#34;a&amp;#34;,&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;],[&amp;#34;aa&amp;#34;,&amp;#34;b&amp;#34;]] * Example 2: Input: s = &amp;#34;a&amp;#34; Output: [[&amp;#34;a&amp;#34;]] 解題思路： 這題也是決策樹問題，把圖畫出來如上。
1. 第一部份 字串aab在進入for迴圈可以將整個字串s切成兩一部份。
第一部份又可以分為三種可能：
i: 0 -&amp;gt; 0: &amp;quot;a&amp;quot; i: 0 -&amp;gt; 1: &amp;quot;aa&amp;quot; i: 0 -&amp;gt; 2: &amp;quot;aab&amp;quot; 接著判斷是否第一部份為回文，是的話進入第二部份，並且將子字串加入part; 不是的話則不繼續往下找
for j in range(i, len(s)): if self.</description>
    </item>
    
    <item>
      <title>90. Subsets II</title>
      <link>http://localhost:1313/blog/post/leetcode_90/</link>
      <pubDate>Fri, 19 May 2023 16:24:10 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/post/leetcode_90/</guid>
      <description>前言： 這題跟78. Subsets 是幾乎一樣的問題，唯一的差別是這題給的input nums會有重複元素出現，但是output res不可有重複組合。
題目： Given an integer array nums that may contain duplicates, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.
* Example 1: Input: nums = [1,2,2] Output: [[],[1],[1,2],[1,2,2],[2],[2,2]] * Example 2: Input: nums = [0] Output: [[],[0]] 解題思路： 一樣用決策樹的思路，一邊是放入當前元素、另一邊是不放入當前元素，只是放入如果已經放入了nums[i](#1)，在pop()後並且跳過nums[i]，打算在下次考慮nums[i+1]前，要先判斷目前的nums[i]與nums[i+1]是否一樣，如果一樣的話就跳過。這樣才可避免走到跟 #1 一樣的決策情況。
一樣，決策的題目畫出決策樹是最好理解的。
程式碼： class Solution: def subsetsWithDup(self, nums: List[int]) -&amp;gt; List[List[int]]: res = [] nums.</description>
    </item>
    
    <item>
      <title>46. Permutations</title>
      <link>http://localhost:1313/blog/post/leetcode_46/</link>
      <pubDate>Fri, 19 May 2023 01:40:26 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/post/leetcode_46/</guid>
      <description>前言： 這題看neetcode的作法感覺像是逆序而行，不太直觀，目前為止還沒看懂。先以之前寫過的解法來做題，下次再做到這題再用neetcode的解法試試。
題目： Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.
* Example 1: Input: nums = [1,2,3] Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] * Example 2: Input: nums = [0,1] Output: [[0,1],[1,0]] * Example 3: Input: nums = [1] Output: [[1]] 解題思路： 假設一開始組合為空，那就是用for迴圈考慮當前的所有選擇，進入每個選擇時都先將當前的元素加入組合中，並且把當前數字移除，使得之後可以考慮的數字剩下除了剛剛加入的元素之外的所有元素，接著再重新進入下一個迴圈
1. Base case 當目前組合的長度已經等於原本nums的長度，則表示已經選完所有數字，即將當前組合append到res中
程式碼： class Solution: def permute(self, nums: List[int]) -&amp;gt; List[List[int]]: res = [] comb = [] n = len(nums) def backtracking(nums): if len(comb) == n: res.</description>
    </item>
    
    <item>
      <title>39. Combination Sum </title>
      <link>http://localhost:1313/blog/post/leetcode_39/</link>
      <pubDate>Fri, 19 May 2023 01:07:13 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/post/leetcode_39/</guid>
      <description>前言： 這題的決策樹(decision tree)比較比較特別，左邊代表繼續選原本的，右邊代表啥都不選，就給你空著。只要把這個概念想清楚，這題也就迎刃而解了。
題目： Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.</description>
    </item>
    
    <item>
      <title>78. Subsets</title>
      <link>http://localhost:1313/blog/post/leetcode_78/</link>
      <pubDate>Wed, 17 May 2023 01:26:32 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/post/leetcode_78/</guid>
      <description>前言： 這題在school也有寫過，當時還負責主講，沒想到時到今日全都忘光了。這次看neetcode的作法選用DFS，赫然發現這是一個更好的作法。
題目： Given an integer array nums of unique elements, return all possible subsets(the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.
* Example 1: Input: nums = [1,2,3] Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]] * Example 2: Input: nums = [0] Output: [[],[0]] 解題思路： 給定一個list:
arr = [1,2] 用一個暫存的subset來存放當前可能的子集合，每個元素都有兩種選擇，要放入subset或是不要放入。
[] / \ [] [1] / \ / \ [] [2] [1] [1,2] 從上圖可以看出，每一層都是對於一個元素的取捨，從最上面的元素1開始，選擇左邊的路就是不放入當前元素，右邊的路就是放入，最後生成所有可能的子集
1. Base case 因為input是一個array，所以當array走到底時就要跳出，此時也代表走到這條DFS路線上的終點，所以可以將當前的subset加入到res當中</description>
    </item>
    
  </channel>
</rss>
